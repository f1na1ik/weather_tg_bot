from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import logging
from config import YOU_TELEGRAM_TOKEN
import database
from weather import get_lat_lon_city, get_5day_forecast, get_current_weather, forecast_dates
from datetime import datetime, date, timedelta

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=YOU_TELEGRAM_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# Create a connection to the database
conn = database.create_connection()

# Create the table if it doesn't exist
database.create_table(conn)


class Form(StatesGroup):
    city_add = State()  # Will be used to save user's city
    city_delete = State()  # Will be used to delete user's city


def create_back_button():
    inline_keyboard = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('‚è™ Go back', callback_data='go_back_button')
    inline_keyboard.add(back_button)
    return inline_keyboard


def create_start_inline_keyboard(user_id):
    inline_keyboard = types.InlineKeyboardMarkup()
    button_another_city = types.InlineKeyboardButton('üîé –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ —Å–ø–∏—Å–æ–∫', callback_data='add_another_city')
    button_delete_city = types.InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='delete_city')
    user_cities = database.get_user_cities(conn, user_id)
    buttons = []
    for city in user_cities:
        button_city = types.InlineKeyboardButton(city, callback_data=f'city_{city}')
        buttons.append(button_city)
        if len(buttons) == 3:
            inline_keyboard.row(*buttons)
            buttons = []
    if buttons:
        inline_keyboard.row(*buttons)
    inline_keyboard.add(button_another_city)
    inline_keyboard.add(button_delete_city)
    return inline_keyboard


def create_delete_inline_keyboard(user_id):
    inline_keyboard = types.InlineKeyboardMarkup()
    user_cities = database.get_user_cities(conn, user_id)
    buttons = []
    for city in user_cities:
        button_city = types.InlineKeyboardButton(city, callback_data=f'city_{city}')
        buttons.append(button_city)
        if len(buttons) == 3:
            inline_keyboard.row(*buttons)
            buttons = []
    if buttons:
        inline_keyboard.row(*buttons)
    back_button = types.InlineKeyboardButton('‚è™ Go back', callback_data='go_back_button')
    inline_keyboard.add(back_button)
    return inline_keyboard


def create_days_info_buttons():
    inline_keyboard = types.InlineKeyboardMarkup()
    button_current_weather = types.InlineKeyboardButton('–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ (–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å)', callback_data='current_weather_button')
    button_current_day_weather = types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞ –Ω–µ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å', callback_data='current_weather_day_button')
    inline_keyboard.add(button_current_weather)
    inline_keyboard.add((button_current_day_weather))
    buttons = [] #—Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    for i in range(1,5):
        day = datetime.now() + timedelta(days=i)
        button_day = types.InlineKeyboardButton(f'–ù–∞ {day.strftime("%d.%m")}', callback_data=f'weather_{day.strftime("%Y-%m-%d")}')
        buttons.append(button_day)
        if len(buttons) == 2:
            inline_keyboard.row(*buttons)
            buttons = []
    if buttons:
        inline_keyboard.row(*buttons)
    back_button = types.InlineKeyboardButton('‚è™ Go back', callback_data='go_back_button')
    inline_keyboard.add(back_button)
    return inline_keyboard


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    database.insert_user(conn, message.from_user.id, message.from_user.username)
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã, –ª–∏–±–æ –¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–∞–º—Ü–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É\n –î–æ–±–∞–≤—å –≥–æ—Ä–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∏–º!",
                        reply_markup=create_start_inline_keyboard(message.from_user.id))


@dp.callback_query_handler(lambda call: call.data.startswith('city_'))  # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞, –∫–∞–∫—É—é –¥–∞—Ç—É —Å–º–æ—Ç—Ä–µ—Ç—å, –∏–Ω—Ñ–∞ –∏ —Ç.–ø
async def callback_check_info_city(callback_query: types.CallbackQuery, state: FSMContext):
    print(callback_query.data)
    city_name = callback_query.data[5:]
    lat, lon = get_lat_lon_city(city_name)
    population, sunrise, sunset, forecast_data = get_5day_forecast(lat_city=lat, lon_city=lon, forecast_date=date.today())
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text=f'***–ü–æ–ø—É–ª—è—Ü–∏—è –≤ –≥–æ—Ä–æ–¥–µ {city_name}:***   {format(population, ",").replace(",", " ")} —á–µ–ª. \n'
                                f'***–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞:***     {sunrise.strftime("%H:%M")}\n'
                                f'***–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞:***      {sunset.strftime("%H:%M")}\n'
                                f'–ö–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ',
                                reply_markup=create_days_info_buttons(),
                                parse_mode='Markdown')
    await state.update_data(current_city=city_name, current_lat=lat, current_lon=lon)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–ª–∏


@dp.callback_query_handler(lambda call: call.data == 'current_weather_button' or call.data.startswith('weather_')
                                  or call.data == 'current_weather_day_button')  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã —É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
async def callback_current_city_info(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    city_name = data.get('current_city')
    print(f'{callback_query.data} {city_name}')
    lat = data.get('current_lat')
    lon = data.get('current_lon')
    if callback_query.data == 'current_weather_button':
        current_weather = get_current_weather(lat, lon)
        await bot.send_message(chat_id=callback_query.message.chat.id,
                               text=f'***–í {city_name} —Å–µ–π—á–∞—Å*** {current_weather.temp:.1f} ¬∞C, ***–Ω–æ '
                                    f'–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ***{current_weather.temps_feels_like:.1f}¬∞C \n'
                                    f'***–í —Ü–µ–ª–æ–º {current_weather.description}***\n'
                                    f'***–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞*** {current_weather.wind_speed} –º/c, ***–≤–ª–∞–∂–Ω–æ—Å—Ç—å*** {current_weather.humidity}%, '
                                    f'***–æ–±–ª–∞—á–Ω–æ—Å—Ç—å*** {current_weather.clouds} %\n',
                               reply_markup=create_days_info_buttons(),
                               parse_mode='Markdown')

    elif callback_query.data.startswith('weather_'):
        data_day = callback_query.data[8:]
        data_day = datetime.strptime(data_day, '%Y-%m-%d').date()
        population, sunrise, sunset, forecast_data = get_5day_forecast(lat, lon, data_day)
        message = ''
        for timestamp, forecast in forecast_data.items():
            message += f'***–í {datetime.fromtimestamp(timestamp).strftime("%H:%M")} —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç: ***{forecast["temp"]:.1f} ¬∞C, ' \
                       f'***–∞ –æ—â—É—â–∞—Ç—å—Å—è –Ω–∞ ***{forecast["temp_feels_like"]:.1f} ¬∞C\n' \
                       f'***–í —Ü–µ–ª–æ–º {forecast["weather_description"]} ***\n' \
                       f'***–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞*** {forecast["wind_speed"]} –º/c, ***–≤–ª–∞–∂–Ω–æ—Å—Ç—å*** {forecast["humidity"]}%, \n' \
                       f'***–æ–±–ª–∞—á–Ω–æ—Å—Ç—å*** {forecast["clouds_percent"]} %\n\n'
        await bot.send_message(chat_id=callback_query.message.chat.id,
                               text=f'***–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {data_day.strftime("%d-%m-%Y")} –≤ –≥–æ—Ä–æ–¥–µ {city_name}:*** \n\n{message}',reply_markup=create_days_info_buttons(),
                               parse_mode='Markdown')

    elif callback_query.data == 'current_weather_day_button':
        population, sunrise, sunset, forecast_data = get_5day_forecast(lat, lon, date.today())
        message = ''
        for timestamp, forecast in forecast_data.items():
            message += f'***–í {datetime.fromtimestamp(timestamp).strftime("%H:%M")} —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç: ***{forecast["temp"]:.1f} ¬∞C, ' \
                       f'***–∞ –æ—â—É—â–∞—Ç—å—Å—è –Ω–∞ ***{forecast["temp_feels_like"]:.1f} ¬∞C\n' \
                       f'***–í —Ü–µ–ª–æ–º {forecast["weather_description"]} ***\n' \
                       f'***–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞*** {forecast["wind_speed"]} –º/c, ***–≤–ª–∞–∂–Ω–æ—Å—Ç—å*** {forecast["humidity"]}%, \n' \
                       f'***–æ–±–ª–∞—á–Ω–æ—Å—Ç—å*** {forecast["clouds_percent"]} %\n\n'
            # f'***–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞*** {forecast["wind_speed"]} –º/c, ***–≤–ª–∞–∂–Ω–æ—Å—Ç—å*** {forecast["humidity"]}%, '
        await bot.send_message(chat_id=callback_query.message.chat.id,
                               text=f'***–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {date.today().strftime("%d-%m-%Y")} –≤ –≥–æ—Ä–æ–¥–µ {city_name}:*** \n\n{message}',
                               reply_markup=create_days_info_buttons(),
                               parse_mode='Markdown')
    else:
        await bot.send_message(chat_id=callback_query.message.chat.id,
                               text=f'–ù–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ—Ç, –ø–æ—Ö–æ–¥—É —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ —á–µ–º 21:00, —Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.',
                               reply_markup=create_days_info_buttons(),
                               parse_mode='Markdown')


@dp.callback_query_handler(lambda call: call.data == 'go_back_button',)  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
async def callback_back_button(callback_query: types.CallbackQuery, state: FSMContext):
    print(callback_query.data)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥',
                           reply_markup=create_start_inline_keyboard(callback_query.from_user.id))
    await state.finish()

@dp.callback_query_handler(lambda call: call.data == 'go_back_button', state=[Form.city_delete, Form.city_add])  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
async def callback_back_button(callback_query: types.CallbackQuery, state: FSMContext):
    print(callback_query.data)
    current_state = await state.get_state()
    if current_state == Form.city_delete.state:
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text='–ü–æ–Ω—è–ª, —É–¥–∞–ª—è—Ç—å –≥–æ—Ä–æ–¥ –Ω–µ –±—É–¥–µ–º.\n–î–µ—Ä–∂–∏ –º–µ–Ω—é—à–∫—É:',
                                    reply_markup=create_start_inline_keyboard(callback_query.from_user.id))
    elif current_state == Form.city_add.state:
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text='–ü–æ–Ω—è–ª, –¥–æ–±–∞–≤–ª—è—Ç—å –≥–æ—Ä–æ–¥ –Ω–µ –±—É–¥–µ–º.\n–î–µ—Ä–∂–∏ –º–µ–Ω—é—à–∫—É:',
                                    reply_markup=create_start_inline_keyboard(callback_query.from_user.id))
    await state.finish()


@dp.callback_query_handler(lambda call: call.data == 'add_another_city')  # –í–≤–µ–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
async def callback_add_city(callback_query: types.CallbackQuery):
    print(callback_query.data)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:',
                                reply_markup=create_back_button())
    await Form.city_add.set()


@dp.callback_query_handler(lambda call: call.data == 'delete_city')  # –í—ã–±–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
async def callback_delete_city(callback_query: types.CallbackQuery):
    print(callback_query.data)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:',
                                reply_markup=create_delete_inline_keyboard(callback_query.from_user.id))
    await Form.city_delete.set()


@dp.callback_query_handler(lambda call: call.data.startswith('city_'),
                           state=Form.city_delete)  # —É–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–ª–∏–∫—É
async def delete_city(callback_query: types.CallbackQuery, state: FSMContext):
    city_name = callback_query.data[5:]  # –≤—ã—Ä–µ–∑–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    print(f'delete {callback_query.data} {city_name}')
    user_id = callback_query.from_user.id
    city_id = database.get_city_id(conn, city_name)
    database.delete_selected_city_from_user(conn, user_id, city_id)  # —É–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É —é–∑–µ—Ä–∞ –≤ –±–¥
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text=f'–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≥–æ—Ä–æ–¥ {city_name}\n–ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–∞–ª—å—à–µ.',
                                reply_markup=create_start_inline_keyboard(callback_query.from_user.id))
    await state.finish()


@dp.message_handler(state=Form.city_add)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Å–ø–∏—Å–æ–∫
async def add_city(message: types.Message, state: FSMContext):
    city_name = message.text
    print(f'Add {message.text}')
    user_id = message.from_user.id
    if get_lat_lon_city(message.text) == None:  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ —á—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É–ª (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç), —Ç–æ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î.
        await bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    else:
        if not database.check_city_exists(conn, city_name):  # –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            database.insert_city(conn, city_name)  # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
            city_id = database.get_city_id(conn, message.text)  # –î–æ–±–∞–≤–∏–ª–∏, —Ç–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º –µ–≥–æ ID
            database.insert_selected_city_by_user(conn, user_id, city_id)  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ —é–∑–µ—Ä—É
        else:
            city_id = database.get_city_id(conn, message.text)  # –ï—Å–ª–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –µ—Å—Ç—å, —Ç–æ –ø–∞—Ä—Å–∏–º –µ–≥–æ ID
            database.insert_selected_city_by_user(conn, user_id, city_id)  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ —é–∑–µ—Ä—É
    await bot.send_message(message.chat.id,
                           f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥: {message.text}\n–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É.',
                           reply_markup=create_start_inline_keyboard(user_id))
    await state.finish()


@dp.message_handler()
async def echo(message: types.Message):
    # old style:
    # await bot.send_message(message.chat.id, message.text)
    await bot.send_message(message.chat.id, '–î—É—Ä–∞—á–æ–∫ —á–µ –ø–∏—à–µ—à—å –≤–≤–µ–¥–∏ /start –∏ –ø–æ–ª—å–∑—É–π—Å—è')
