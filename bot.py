from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import logging
from config import YOU_TELEGRAM_TOKEN
import database
from weather import get_lat_lon_city


# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=YOU_TELEGRAM_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# Create a connection to the database
conn = database.create_connection()

# Create the table if it doesn't exist
database.create_table(conn)


class Form(StatesGroup):
    city_add = State()  # Will be used to save user's city
    city_delete = State() # Will be used to delete user's city


# def create_start_inline_keyboard():
#     inline_keyboard = types.InlineKeyboardMarkup()
#     array_of_buttons = [types.InlineKeyboardButton(f'Button{i}', callback_data=f'button{i}') for i in range(5)]
#     inline_keyboard.add(*array_of_buttons)
#     return inline_keyboard

def create_back_button():
    inline_keyboard = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('‚è™ Go back', callback_data='go_back_button')
    inline_keyboard.add(back_button)
    return inline_keyboard


def create_start_inline_keyboard(user_id):
    inline_keyboard = types.InlineKeyboardMarkup()
    button_another_city = types.InlineKeyboardButton('üîé –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ —Å–ø–∏—Å–æ–∫', callback_data='add_another_city')
    button_delete_city = types.InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='delete_city')
    user_cities = database.get_user_cities(conn, user_id)
    buttons = []
    for city in user_cities:
        button_city = types.InlineKeyboardButton(city, callback_data=f'city_{city}')
        buttons.append(button_city)
        if len(buttons) == 3:
            inline_keyboard.row(*buttons)
            buttons = []
    if buttons:
        inline_keyboard.row(*buttons)
    inline_keyboard.add(button_another_city)
    inline_keyboard.add(button_delete_city)
    return inline_keyboard

def create_delete_inline_keyboard(user_id):
    inline_keyboard = types.InlineKeyboardMarkup()
    user_cities = database.get_user_cities(conn, user_id)
    buttons = []
    for city in user_cities:
        button_city = types.InlineKeyboardButton(city, callback_data=f'city_{city}')
        buttons.append(button_city)
        if len(buttons) == 3:
            inline_keyboard.row(*buttons)
            buttons = []
    if buttons:
        inline_keyboard.row(*buttons)
    back_button = types.InlineKeyboardButton('‚è™ Go back', callback_data='go_back_button')
    inline_keyboard.add(back_button)
    return inline_keyboard

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    database.insert_user(conn, message.from_user.id, message.from_user.username)
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã, –ª–∏–±–æ –¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–∞–º—Ü–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É",
                        reply_markup=create_start_inline_keyboard(message.from_user.id))


@dp.callback_query_handler(lambda call: call.data == 'go_back_button', state=[Form.city_delete, Form.city_add]) #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
async def callback_back_button(callback_query: types.CallbackQuery, state: FSMContext):
    print(callback_query.data)
    current_state = await state.get_state()
    if current_state == Form.city_delete.state:
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text='–ü–æ–Ω—è–ª, —É–¥–∞–ª—è—Ç—å –≥–æ—Ä–æ–¥ –Ω–µ –±—É–¥–µ–º.\n–î–µ—Ä–∂–∏ –º–µ–Ω—é—à–∫—É:',
                                    reply_markup=create_start_inline_keyboard(callback_query.from_user.id))
    elif current_state == Form.city_add.state:
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text='–ü–æ–Ω—è–ª, –¥–æ–±–∞–≤–ª—è—Ç—å –≥–æ—Ä–æ–¥ –Ω–µ –±—É–¥–µ–º.\n–î–µ—Ä–∂–∏ –º–µ–Ω—é—à–∫—É:',
                                    reply_markup=create_start_inline_keyboard(callback_query.from_user.id))
    await state.finish()


@dp.callback_query_handler(lambda call: call.data == 'add_another_city') # –í–≤–µ–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
async def callback_add_city(callback_query: types.CallbackQuery):
    print(callback_query.data)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:',
                                reply_markup=create_back_button())
    await Form.city_add.set()

@dp.callback_query_handler(lambda call: call.data == 'delete_city') # –í—ã–±–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
async def callback_add_city(callback_query: types.CallbackQuery):
    print(callback_query.data)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:',
                                reply_markup=create_delete_inline_keyboard(callback_query.from_user.id))
    await Form.city_delete.set()


@dp.message_handler(state=Form.city_add) # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Å–ø–∏—Å–æ–∫
async def add_city(message: types.Message, state: FSMContext):
    city_name = message.text
    user_id = message.from_user.id
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ —á—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É–ª (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç), —Ç–æ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î.
    if get_lat_lon_city(message.text) == None:
        await bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    else:
        if not database.check_city_exists(conn, city_name): #–ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            database.insert_city(conn, city_name) # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
            city_id = database.get_city_id(conn, message.text)  # –î–æ–±–∞–≤–∏–ª–∏, —Ç–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º –µ–≥–æ ID
            database.insert_selected_city_by_user(conn, user_id, city_id)  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ —é–∑–µ—Ä—É
        else:
            city_id = database.get_city_id(conn, message.text)  #–ï—Å–ª–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –µ—Å—Ç—å, —Ç–æ –ø–∞—Ä—Å–∏–º –µ–≥–æ ID
            database.insert_selected_city_by_user(conn, user_id, city_id)   #–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ —é–∑–µ—Ä—É
    await bot.send_message(message.chat.id, f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥: {message.text}', reply_markup=create_start_inline_keyboard(user_id))
    await state.finish()


@dp.message_handler()
async def echo(message: types.Message):
    # old style:
    # await bot.send_message(message.chat.id, message.text)
    await bot.send_message(message.chat.id, message.text)
    await message.answer(message.text)

